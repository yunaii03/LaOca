import random

#DADO
def dado():
   x=random.randint(1,6)
   return(x)

#MOVIMIENTO P1
def movementpc1(P1,who):


    tablero={0:["21", "20", "19", "18", "17", "16", "15", "14"],
       1:["22", "43", "42", "41", "40", "39", "38", "13"],
       2:["23", "44", "57", "56", "55", "54", "37", "12"],
       3:["24", "45", "58", "63", "62", "53", "36", "11"],
       4:["25", "46", "59", "60", "61", "52", "35", "10"],
       5:["26", "47", "48", "49", "50", "51", "34", "9"],
       6:["27", "28", "29", "30", "31", "32", "33", "8"],
       7:["0", "1", "2", "3", "4", "5", "6", "7"]}


    tablero1={7: ["_", "_", "_", "_", "_", "_", "_", "_"],
              6: ["_", "_", "_", "_", "_", "_", "_", "_"],
              5: ["_", "_", "_", "_", "_", "_", "_", "_"],
              4: ["_", "_", "_", "63","_", "_", "_", "_"],
              3: ["_", "_", "_", "_", "_", "_", "_", "_"],
              2: ["_", "_", "_", "_", "_", "_", "_", "_"],
              1: ["_", "_", "_", "_", "_", "_", "_", "_"],
              0: ["0", "_", "_", "_", "_", "_", "_", "_"] }
        #primero mira filas, luego columnas

    dicci={0:[0,0],
    1:[0,1],
    2:[2,7],
    3:[3,7],
    4:[4,7],
    5:[5,7],
    6:[6,7],
    7:[7,7],
    8:[1,7],
    9:[7,5],
    10:[7,4],
    11:[7,3],
    12:[7,2],
    13:[7,1],
    14:[7,0],
    15:[6,0],
    16:[5,0],
    17:[0,4],
    18:[3,0],
    19:[2,0],
    20:[1,0],
    21:[0,0],
    22:[0,1],
    23:[0,2],
    24:[0,3],
    25:[0,4],
    26:[0,5],
    27:[0,6],
    28:[1,6],
    29:[2,6],
    30:[3,6],
    31:[4,6],
    32:[5,6],
    33:[6,6],
    34:[6,5],
    35:[6,4],
    36:[6,3],
    37:[6,2],
    38:[6,1],
    39:[5,1],
    40:[4,1],
    41:[3,1],
    42:[2,1],
    43:[1,1],
    44:[1,2],
    45:[1,3],
    46:[1,4],
    47:[1,5],
    48:[2,5],
    49:[3,5],
    50:[4,5],
    51:[5,5],
    52:[5,4],
    53:[5,3],
    54:[5,2],
    55:[4,1],
    56:[3,2],
    57:[2,2],
    58:[2,3],
    59:[2,4],
    60:[3,4],
    61:[4,4],
    62:[4,3],
    63:[3,3],
    }


    var_posicion = dicci[P1]
    x = var_posicion[0]
    y = var_posicion[1]
    print(tablero1[x][y])
    return (P1,who)




#MOVEMENTALEXA
def movementalexa(alexa,who):

    #tablero={0:["21", "20", "19", "18", "17", "16", "15", "14"],
       #:["22", "43", "42", "41", "40", "39", "38", "13"],
       #:["23", "44", "57", "56", "55", "54", "37", "12"],
       #:["24", "45", "58", "63", "62", "53", "36", "11"],
       #:["25", "46", "59", "60", "61", "52", "35", "10"],
       #:["26", "47", "48", "49", "50", "51", "34", "9"],
       #:["27", "28", "29", "30", "31", "32", "33", "8"],
       #:["0", "_1", "_2", "_3", "_4", "_5", "_6", "_7"]}

                   #0    1    2    3
    tablero1={7: ["_", "_", "_", "_", "_", "_", "_", "_"],
              6: ["_", "_", "_", "_", "_", "_", "_", "_"],
              5: ["_", "_", "_", "_", "_", "_", "_", "_"],
              4: ["_", "_", "_", "_","_", "_", "_", "_"],
              3: ["_", "_", "_", "_", "_", "_", "_", "_"],
              2: ["_", "_", "_", "_", "_", "_", "_", "_"],
              1: ["_", "_", "_", "_", "_", "_", "_", "_"],
              0: ["_", "_", "_", "_", "_", "_", "_", "_"] }
        #primero mira filas, luego columnas

    dicci={0:[0,0],
    1:[0,1],
    2:[2,7],
    3:[3,7],
    4:[4,7],
    5:[5,7],
    6:[6,7],
    7:[7,7],
    8:[1,7],
    9:[7,5],
    10:[7,4],
    11:[7,3],
    12:[7,2],
    13:[7,1],
    14:[7,0],
    15:[6,0],
    16:[5,0],
    17:[0,4],
    18:[3,0],
    19:[2,0],
    20:[1,0],
    21:[0,0],
    22:[0,1],
    23:[0,2],
    24:[0,3],
    25:[0,4],
    26:[0,5],
    27:[0,6],
    28:[1,6],
    29:[2,6],
    30:[3,6],
    31:[4,6],
    32:[5,6],
    33:[6,6],
    34:[6,5],
    35:[6,4],
    36:[6,3],
    37:[6,2],
    38:[6,1],
    39:[5,1],
    40:[4,1],
    41:[3,1],
    42:[2,1],
    43:[1,1],
    44:[1,2],
    45:[1,3],
    46:[1,4],
    47:[1,5],
    48:[2,5],
    49:[3,5],
    50:[4,5],
    51:[5,5],
    52:[5,4],
    53:[5,3],
    54:[5,2],
    55:[4,1],
    56:[3,2],
    57:[2,2],
    58:[2,3],
    59:[2,4],
    60:[3,4],
    61:[4,4],
    62:[4,3],
    63:[3,3],
    }

    var_posicion=dicci[alexa]
    x = var_posicion[0]
    y = var_posicion[1]
    print(tablero1[x][y])
    return (alexa,who)








def ifs(posicion_j,who,activador):

    if posicion_j == 5 or posicion_j ==14 or posicion_j ==23 or posicion_j ==32 or posicion_j == 41 or posicion_j == 50 or posicion_j == 59:
        activador = "activado"
        posicion_f=oca4(posicion_j,who)
        return activador, who, posicion_f
        
  
    if posicion_j== 9 or posicion_j ==18 or posicion_j == 27 or posicion_j == 36 or posicion_j == 45 or posicion_j == 54:
        activador = "activado"
        posicion_f=oca5(posicion_j,who)
        return activador, who, posicion_f
      

    if posicion_j == 6:
        activador = "activado"
        posicion_f=puente6(posicion_j,who)
        return activador, who, posicion_f
      
   
    if posicion_j == 12:
        activador = "activado"
        posicion_f=puente12(posicion_j,who)
        return activador, who, posicion_f
     


    if posicion_j == 19:
        activador= "activado"
        posicion_f=posada(posicion_j,who)
        return activador,who,posicion_f


    if posicion_j== 31:
        activador = "activado"
        posicion_f=pozo_bronze(posicion_j,who)
        return activador, who, posicion_f

    if posicion_j== 26:
        activador = "activado"
        posicion_f=dados26(posicion_j,who)
        return activador, who, posicion_f
        
    if posicion_j==58:
        activador = "activado"
        posicion_f=muerte(posicion_j,who)
        return activador, who, posicion_f

    if posicion_j== 53:
        activador = "activado"
        posicion_f=dados53(posicion_j,who)
        return activador, who, posicion_f

    if posicion_j== 42:
        activador = "activado"
        posicion_f=laberinto(posicion_j,who)
        return activador, who, posicion_f

    if posicion_j == 58:
        activador = "activado"
        posicion_f=alavera(posicion_j,who)
        return activador, who, posicion_f

    if posicion_j== 63:
        activador = "activado"
        posicion_f=win(who)
        return activador, who, posicion_f
    
    else:
        print("No hay casilla especial")
        return activador, who, posicion_f

#POSADA
def posada(posicion_j,who):
    if who=="AL":
        who="P1"
        for x in range(2):
            print("Alexa se perderá dos turnos. Ya puedes tirar los dados ")
            tiro=dado()
            posicion_j=posicion_j+tiro
        mov_especial(posicion_j,who)
        return posicion_j
    if who == "P1": 
        who="AL"
        for x in range(2):
            print("P1 se perderá dos turnos. Ya puedes tirar los dados ")
            tiro = dado()
            posicion_j = posicion_j + tiro
        mov_especial(posicion_j, who)
        return posicion_j
    
#POZO BRONCE
def pozo_bronze(posicion_j,who):
    if who == "AL":
        who="P1"
        for x in range(3):
            print("Alexa se perderá dos turnos. Ya puedes tirar los dados ")
            tiro = dado()
            posicion_j = posicion_j + tiro
        mov_especial(posicion_j, who)
        return posicion_j

    if who == "P1":
        who="AL"
        for x in range(3):
            print("P1 se perderá dos turnos. Ya puedes tirar los dados ")
            tiro = dado()
            posicion_j = posicion_j + tiro
        mov_especial(posicion_j, who)
        return posicion_j



def win(who):
    print("Enhorabuena",who,"!!!. Eres el ganador de la partida ")
    
#PUENTE
def puente6(posicion_j,who):
    posicion_j=posicion_j+6
    mov_especial(posicion_j,who)
    return posicion_j
#CALAVERA
def calavera(posicion_j,who):
    posicion_j = 0
    mov_especial(posicion_j, who)
    return posicion_j
    print('Has retrocedido hasta la casilla principal y te encuentras en la salida', who)

#DADOS
def dados53(posicion_j,who):
    print("Tirarás dos veces y avanzarás la suma de las dos tiradas.")
    z=dado()
    print("has sacado un",z)
    y = dado()
    print("has sacado un", y)
    x=z+y
    posicion_j=posicion_j+x
    print("avanzas",x)

    mov_especial(posicion_j,who)
    return posicion_j

def dados26(posicion_j,who):
    print("Tirarás dos veces y avanzarás la suma de las dos tiradas.")
    z=dado()
    print("has sacado un",z)
    y = dado()
    print("has sacado un", y)
    x=z+y
    posicion_j=posicion_j+x
    print("avanzas",x)
    mov_especial(posicion_j,who)
    return posicion_j

#MUERTE

def muerte(posicion_j,who):
    posicion_j = 0
    mov_especial(posicion_j, who)
    print('Has retrocedido hasta la casilla principal y te encuentras en la salida',who)
    return posicion_j

#LABERINTO
def laberinto(posicion_j,who):
    if who == "AL":
        posicion_j = 30
        mov_especial(posicion_j, who)
        return posicion_j
    if who == "P1":
        posicion_j = 30
        mov_especial(posicion_j, who)
        return posicion_j

#OCA
def oca4(posicion_j,who):
    if posicion_j==5:
        posicion_j=14  

    if posicion_j==14:
        posicion_j=32

    if posicion_j==32:
        posicion_j=41

    if posicion_j==41:
        posicion_j=50

    if posicion_j==50:
        posicion_j=59

    mov_especial(posicion_j,who)
    return posicion_j

def oca5(posicion_j,who):
    if posicion_j==9:
        posicion_j=14 

    if posicion_j==18:
        posicion_j=32

    if posicion_j==27:
        posicion_j=41

    if posicion_j==36:
        posicion_j=50

    if posicion_j==45:
        posicion_j=59

    if posicion_j==54:
        posicion_j=59

    mov_especial(posicion_j,who)
    return posicion_j






def mov_especial(posicion_esp,who):
    tablero1 = {7: ["_", "_", "_", "_", "_", "_", "_", "_"],
                6: ["_", "_", "_", "_", "_", "_", "_", "_"],
                5: ["_", "_", "_", "_", "_", "_", "_", "_"],
                4: ["_", "_", "_", "_", "_", "_", "_", "_"],
                3: ["_", "_", "_", "_", "_", "_", "_", "_"],
                2: ["_", "_", "_", "_", "_", "_", "_", "_"],
                1: ["_", "_", "_", "_", "_", "_", "_", "_"],
                0: ["_", "_", "_", "_", "_", "_", "_", "_"]}
    # primero mira filas, luego columnas

    dicci = {0: [0, 0],
             1: [0, 1],
             2: [2, 7],
             3: [3, 7],
             4: [4, 7],
             5: [5, 7],
             6: [6, 7],
             7: [7, 7],
             8: [1, 7],
             9: [7, 5],
             10: [7, 4],
             11: [7, 3],
             12: [7, 2],
             13: [7, 1],
             14: [7, 0],
             15: [6, 0],
             16: [5, 0],
             17: [0, 4],
             18: [3, 0],
             19: [2, 0],
             20: [1, 0],
             21: [0, 0],
             22: [0, 1],
             23: [0, 2],
             24: [0, 3],
             25: [0, 4],
             26: [0, 5],
             27: [0, 6],
             28: [1, 6],
             29: [2, 6],
             30: [3, 6],
             31: [4, 6],
             32: [5, 6],
             33: [6, 6],
             34: [6, 5],
             35: [6, 4],
             36: [6, 3],
             37: [6, 2],
             38: [6, 1],
             39: [5, 1],
             40: [4, 1],
             41: [3, 1],
             42: [2, 1],
             43: [1, 1],
             44: [1, 2],
             45: [1, 3],
             46: [1, 4],
             47: [1, 5],
             48: [2, 5],
             49: [3, 5],
             50: [4, 5],
             51: [5, 5],
             52: [5, 4],
             53: [5, 3],
             54: [5, 2],
             55: [4, 1],
             56: [3, 2],
             57: [2, 2],
             58: [2, 3],
             59: [2, 4],
             60: [3, 4],
             61: [4, 4],
             62: [4, 3],
             63: [3, 3],
             }

    var_posicion = dicci[posicion_esp]
    x = var_posicion[0]
    y = var_posicion[1]
    print(tablero1[x][y])
